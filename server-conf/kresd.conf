modules = {
	'hints > iterate',
	'policy',
	'daf',
        'serve_stale < cache',
        'workarounds < iterate'
}
-- modules = {
 --       'daf',
 --       'policy',
 --       'hints',
 --       'serve_stale < cache',
 --       'workarounds < iterate'
--}

--modules.unload('priming')
--modules.unload('ta_sentinel')
--modules.unload('ta_signal_query')

-- Add a custom hint
hints['foo.bar'] = '127.0.0.1'

net.tls('/etc/letsencrypt/live/dns.jp.blahdns.com/fullchain.pem','/etc/letsencrypt/live/dns.jp.blahdns.com/privkey.pem')
net.listen('0.0.0.0', 53)
net.listen('::', 53)
net.listen('0.0.0.0', 853)
net.listen('::', 853)

policy.add(policy.rpz(policy.DENY, '/etc/knot-resolver/rpz.blacklist'))

-- Disallow ANY queries
policy.add(function (req, query)
        if query.stype == kres.type.ANY then
                return policy.DROP
        end
end)

-- Enable DNSSEC validation
trust_anchors.add_file('/var/lib/unbound/root.key', true)

-- trust_anchors.file = '/etc/unbound/root.keys'

-- Block all queries with QNAME = example.com

-- daf.add 'qname = ads.twitter.com deny'

-- Prefetch learning (20-minute blocks over 24 hours)
-- predict.config(20, 72)

-- Cache size

-- cache.size = 150 * MB 
-- cache.max_ttl(3600)


--policy.add(policy.suffix(policy.FORWARD('1.1.1.1'), {todname('dev.snapchat.adtz.com')}))
--policy.add(policy.suffix(policy.FORWARD('1.1.1.1'), {todname('staging.app-analytics.snapchat.com')}))

policy.add(policy.all(policy.STUB('::1@54')))
policy.add(policy.all(policy.STUB('127.0.0.1@54')))

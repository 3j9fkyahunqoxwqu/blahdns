modules = {
	'policy',
	'hints > iterate',
	'serve_stale < cache',
	'workarounds < iterate'
}

--modules.unload('cache')
--modules.unload('hints')
--modules.unload('priming')
--modules.unload('ta_sentinel')
--modules.unload('ta_signal_query')
--modules.unload('detect_time_jump')
--modules.unload('detect_time_skew')

net.listen({'::1', '127.0.0.1'}, port)

-- Add a custom hint
hints['foo.bar'] = '127.0.0.1'
hints['example'] = '127.0.0.1'
hints['local'] = '127.0.0.1'
hints['i2p'] = '127.0.0.1'
hints['home'] = '127.0.0.1'
hints['zghjccbob3n0'] = '127.0.0.1'
hints['dhcp'] = '127.0.0.1'
hints['lan'] = '127.0.0.1'
hints['localdomain'] = '127.0.0.1'
hints['ip'] = '127.0.0.1'
hints['internal'] = '127.0.0.1'
hints['openstacklocal'] = '127.0.0.1'
hints['dlink'] = '127.0.0.1'
hints['gateway'] = '127.0.0.1'
hints['corp'] = '127.0.0.1'
hints['workgroup'] = '127.0.0.1'
hints['belkin'] = '127.0.0.1'
hints['davolink'] = '127.0.0.1'
hints['z'] = '127.0.0.1'
hints['domain'] = '127.0.0.1'
hints['virtualmin'] = '127.0.0.1'

-- Disallow ANY & PTR queries
policy.add(function (req, query)
        if query.stype == kres.type.ANY then
                return policy.DROP
	elseif query.stype == kres.type.PTR then
                return policy.DROP
        end
end)

-- Cache size
cache.size = 150 * MB

policy.add(policy.rpz(policy.DENY, '/etc/knot-resolver/rpz.blacklist'))

-- OpenNIC 
opennicTrees = policy.todnames({'uu','ti','te','ku','lib','emc','coin','baza','glue','parody','pirate','oss','oz','bit','dns.opennic.glue','bbs','chan','cyb','dyn','fur','gopher','geek','opennic.glue','o','neo','indy','libre', 'null'})

-- Beware: the rule order is important, as STUB is not a chain action.
policy.add(policy.suffix(policy.FLAGS({'NO_CACHE'}), opennicTrees))
policy.add(policy.suffix(policy.STUB({'::1@52'}), opennicTrees))

policy.add(policy.all(policy.FORWARD('::1@51')))

-- Disable dnssec, if need so
-- trust_anchors.negative = { '.' }

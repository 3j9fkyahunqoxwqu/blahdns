modules = {
	'policy',
	'rebinding < iterate',
	'hints > iterate',
	'serve_stale < cache',
	'workarounds < iterate',
	--'stats',
	--'predict',
	--'daf'
}

--modules.unload('cache')
--modules.unload('hints')
--modules.unload('priming')
--modules.unload('ta_sentinel')
--modules.unload('ta_signal_query')
--modules.unload('detect_time_jump')
--modules.unload('detect_time_skew')

net.listen({'::1', '127.0.0.1'}, port)

-- Add a custom hint
hints['foo.bar'] = '127.0.0.1'
hints['example'] = '127.0.0.1'
hints['local'] = '127.0.0.1'
hints['i2p'] = '127.0.0.1'
hints['home'] = '127.0.0.1'
hints['zghjccbob3n0'] = '127.0.0.1'
hints['dhcp'] = '127.0.0.1'
hints['lan'] = '127.0.0.1'
hints['localdomain'] = '127.0.0.1'
hints['ip'] = '127.0.0.1'
hints['internal'] = '127.0.0.1'
hints['openstacklocal'] = '127.0.0.1'
hints['dlink'] = '127.0.0.1'
hints['gateway'] = '127.0.0.1'
hints['corp'] = '127.0.0.1'
hints['workgroup'] = '127.0.0.1'
hints['belkin'] = '127.0.0.1'
hints['davolink'] = '127.0.0.1'
hints['z'] = '127.0.0.1'
hints['domain'] = '127.0.0.1'
hints['virtualmin'] = '127.0.0.1'


-- Disallow PTR queries
policy.add(function (req, query)
        if query.stype == kres.type.PTR then
                return policy.DROP
        end
end)

-- Disallow ANY queries
policy.add(function (req, query)
        if query.stype == kres.type.ANY then
                return policy.DROP
        end
end)

-- Cache size
cache.size = 200 * MB

policy.add(policy.rpz(policy.DENY, '/etc/knot-resolver/rpz.blacklist'))

whiteLists = policy.todnames({'cdn.jsdelivr.net','googleadapis.l.google.com','vjs.zencdn.net','mailchimp.com','.mailchimp.com','adwords.google.com','csi.gstatic.com','s.youtube.com','adsp.xunlei.com','csdnimg.cn','.csdnimg.cn','www-google-analytics.l.google.com','www.google-analytics.com','beacon.shazam.com','fonts.gstatic.com','.meizu.com','.mandrillapp.com','pixel.wp.com','stats.wp.com','analytics.twitter.com','dtlilztwypawv.cloudfront.net','js-agent.newrelic.com','p.typekit.net','cdn.segment.com','cdn.optimizely.com','.newrelic.com','newrelic.com','bam.nr-data.net','bing.com','www.bing.com','q.stripe.com','*.stripe.com','use.fontawesome.com','cdn.jsdelivr.net',})

-- OpenNIC 
opennicTrees = policy.todnames({'uu','ti','te','ku','lib','emc','coin','baza','glue','parody','pirate','oss','oz','bit','dns.opennic.glue','bbs','chan','cyb','dyn','fur','gopher','geek','opennic.glue','o','neo','indy','libre', 'null'})

-- Beware: the rule order is important, as STUB is not a chain action.
policy.add(policy.suffix(policy.FLAGS({'NO_CACHE'}), opennicTrees))
policy.add(policy.suffix(policy.STUB({'::1@51'}), opennicTrees))
policy.add(policy.suffix(policy.FORWARD('::1@52'), whiteLists))
policy.add(policy.all(policy.FORWARD('::1@52')))
